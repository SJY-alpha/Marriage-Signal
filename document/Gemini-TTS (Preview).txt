# Gemini-TTS 종합 정리

## 1. 모델 종류
- **gemini-2.5-flash-preview-tts**
  - 짧은 지연 시간, 비용 효율적, 일상 대화 적합
- **gemini-2.5-pro-preview-tts**
  - 품질 우수, 감정/억양 제어 가능, 복잡한 프롬프트 대응
- **gemini tts 는 단일화자(1인용)용 다중화자용(2인 이상)이 있다.
---

## 2. 주요 기능과 제어 방법
- **자연스러운 대화**
  - 프롬프트 예: "casual conversation", "natural dialogue"
- **스타일 제어 (억양, 속삭임 등)**
  - 프롬프트 예: "in a whispering tone", "formal", "angry"
- **감정/억양 제어**
  - 프롬프트 예: "in a surprised and joyful tone", "sad and hesitant"
- **속도 및 발음 제어**
  - API 속성: `speaking_rate`, `pitch`
  - 프롬프트 예: "[extremely fast]", "[slowly and carefully]"

---

## 3. API 속성 vs 프롬프트 제어
| 구분 | API 속성 | 프롬프트 제어 |
|------|-----------|---------------|
| 제어 방식 | 수치형 파라미터 (`speaking_rate`, `pitch`) | 자연어 지시문 |
| 적용 | 일정하고 기계적, 전 구간 동일 | 문맥 따라 달라짐, 억양·연기 포함 |
| 예시 | `speaking_rate=0.8`, `pitch=+2.0` | "Say this extremely fast and excited" |

---

## 4. 음성 옵션 (일부)

4.1 성별
- **여성**: Achernar, Aoede, Autonoe, Callirrhoe, Despina, Erinome, Gacrux, Kore, Laomedeia, Leda, Sulafat, Vindemiatrix, Zephyr
- **남성**: Achird, Algenib, Algieba, Alnilam, Charon, Enceladus, Fenrir, Iapetus, Orus, Puck, Rasalgethi, Sadachbia, Sadaltager, Schedar, Umbriel, Zubenelgenubi, Pulcherrima  
- 각 음성에는 기본 라벨이 있음 (예: **Fenrir: 남성, 흥분함** → 기본 성격 설명)

4.2 톤
Zephyr -- Bright	Puck -- Upbeat	Charon -- Informative
Kore -- Firm	Fenrir -- Excitable	Leda -- Youthful
Orus -- Firm	Aoede -- Breezy	Callirrhoe -- Easy-going
Autonoe -- Bright	Enceladus -- Breathy	Iapetus -- Clear
Umbriel -- Easy-going	Algieba -- Smooth	Despina -- Smooth
Erinome -- Clear	Algenib -- Gravelly	Rasalgethi -- Informative
Laomedeia -- Upbeat	Achernar -- Soft	Alnilam -- Firm
Schedar -- Even	Gacrux -- Mature	Pulcherrima -- Forward
Achird -- Friendly	Zubenelgenubi -- Casual	Vindemiatrix -- Gentle
Sadachbia -- Lively	Sadaltager -- Knowledgeable	Sulafat -- Warm

---

## 5. Python 예제 코드
```python
import os
from google.cloud import texttospeech

PROJECT_ID = os.getenv("GOOGLE_CLOUD_PROJECT")

def synthesize(prompt: str, text: str, model_name: str, speaker: str, output_filepath: str = "output.mp3"):
    client = texttospeech.TextToSpeechClient()

    # 텍스트 및 프롬프트 입력
    synthesis_input = texttospeech.SynthesisInput(text=text, prompt=prompt)

    # 음성 선택
    voice = texttospeech.VoiceSelectionParams(
        language_code="en-US",
        name=speaker,            # 예: "Fenrir"
        model_name=model_name    # "gemini-2.5-pro-preview-tts"
    )

    # 오디오 설정 (속도·피치 제어 가능)
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3,
        speaking_rate=0.9,   # 속도 제어
        pitch=1.1            # 피치 제어
    )

    # 요청 수행
    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )

    # 파일 저장
    with open(output_filepath, "wb") as out:
        out.write(response.audio_content)
        print(f"Audio content written to file: {output_filepath}")

# 사용 예시
synthesize(
    prompt="Say the following in a whispering, secretive tone",
    text="Can you keep a secret?",
    model_name="gemini-2.5-pro-preview-tts",
    speaker="Kore",
    output_filepath="whisper.mp3"
)

목소리 기본 성격(경쾌함, 흥분함 등) = 음성 프리셋 라벨
속도·피치 = API 속성 (speaking_rate, pitch)
억양·감정·스타일(속삭임 등) = 프롬프트 제어
실무 활용법: API로 기본 톤 고정 → 프롬프트로 감정·연기 추가

참고: 텍스트 필드와 프롬프트 필드의 크기는 각각 최대 900바이트입니다. 프롬프트와 텍스트 필드의 총 크기는 최대 1,800바이트이지만 각 필드는 최대 900바이트여야 합니다.
참고: Gemini-TTS를 사용하려면 모델 엔드포인트에 aiplatform.endpoints.predict 권한이 필요합니다. 이 권한은 roles/aiplatform.user 역할로 부여할 수 있습니다.

